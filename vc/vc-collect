#!/usr/bin/env tclsh
# -*- tcl -*-
package require Tcl 8.5
package require fileutil 1.16 ;# sqlite and fossil db detection.
package require fileutil::traverse
package require lambda

proc main {} {
    scan-over [cmdline]
}

proc cmdline {} {
    global argv
    if {![llength $argv]} usage
    return $argv
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 path path..."
    exit 1
}

proc scan-over {pathlist} {
    foreach path $pathlist {
	set path [file dirname [file normalize $path/...]]
	#puts T|$path
	# Ignore possible repo, and marker.
	# IOW skip FOO when FOO.ignore exists,
	# and skip FOO.ignore as well.
	# This may be augmented by additional vc-dependent checks
	# Skip links
	fileutil::traverse T $path -filter [lambda path {
	    set t [file tail $path]
	    expr {([file type $path] ne "link") && ([file extension $t] ne ".ignore") && ![file exists ${path}.ignore]}
	}] -prefilter [lambda path {
	    #puts PF($path)=[file type $path]
	    expr {[file type $path] ne "link"}
	}]
	T foreach p {
	    if {![is-vc $p]} continue
	    puts $p
	}
	T destroy
    }
}

proc is-vc {path} {
    #puts fossil($path)=[is-fossil $path]
    expr {
	  [is-fossil $path] ||
	  [is-git    $path]
    }
}

proc is-fossil {path} {
    # Fossil repos are files (sqlite databases)
    if {[file isdir $path]} { return 0 }
    if {([file extension $path] eq ".fossil") &&
	[file exists [file rootname $path].ignore]} {
	# skip FOO.fossil if there is FOO.ignore
	# Augments the global filter
	return 0
    }
    #puts ?$path
    return [expr {"fossil-repository" in [fileutil::fileType $path]}]
}

proc is-git {path} {
    # git repos are dirs
    if {[file isfile $path]} { return 0 }
    # We are in the internal area of a git repo. That is not a repo in itself.
    if {[file tail $path] eq ".git"} { return 0 }

    set here [pwd]
    if {[catch {
	cd $path
    }]} { cd $here ; return 0 }

    if {[catch {
	set res [exec git rev-parse --git-dir 2>/dev/null]
    }]} {
	cd $here
	return 0
    }

    if {[catch {
	# Try to count commits. Failing to do so weeds out partially defined
	# and/or broken git repos.
	exec git --git-dir $res rev-list --all --count
    }]} {
	cd $here
	return 0
    }

    cd $here
    return [expr {$res in {. .git}}]
}

main
exit 0
