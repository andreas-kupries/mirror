#!/home/aku/Data/My/Web/bin.tcl/tclsh8.6
## -*- tcl -*-
# # ## ### ##### ######## ############# ######################
#!/usr/bin/env tclsh -- Need 8.6

# CGI helper application to manage the search form of the web site.

# # ## ### ##### ######## ############# ######################

# @@ Meta Begin
# Application mirror-search   ?
# Meta author      {Andreas Kupries}
# Meta category    ?
# Meta description ?
# Meta location    https://core.tcl-lang.org/akupries/????
# Meta platform    tcl
# Meta require     m::db::location
# Meta require     m::site
# Meta require     m::format
# Meta require     m::web::bootstrap
# Meta require     m::wapp
# Meta require     {Tcl 8.6-}
# Meta subject     ?
# Meta summary     ?
# @@ Meta End

# # ## ### ##### ######## ############# ######################
#puts stderr [info nameofexecutable]
package require Tcl 8.6
package require m::db::location
package require m::app
package require m::site
package require m::format
package require m::web::bootstrap
package require wapp

proc main {} {
    global env
    if {![info exists env(TERM)]} { set env(TERM) xterm }
    m app debugflags
    cmdline
    # Allow for 10 second transactions from the cli or submission
    # helper before giving up.
    m::site::wait 10
    #wapp-start -trace
    wapp-start {}
}

proc cmdline {} {
    global argv
    if {[llength $argv] > 1} usage
    if {[llength $argv] < 1} return

    lassign $argv config

    # The config file is trusted, as is the database it references,
    # deploy this only in a secure and controlled environment.

    proc database: {database} {
	m::db::location set $database
	return
    }

    proc stderr: {path} {
	file mkdir [file dirname $path]
	close stderr
	open $path a ;# This is now stderr
	return
    }

    source $config
    rename database: {}
    return
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 ?config-file?"
    exit 1
}

# # ## ### ##### ######## ############# ######################

# Main page. Search form, and list of results.
# All unknown urls point to the same.
proc wapp-default {} {
    wapp-allow-xorigin-params
    wapp-trim { %unsafe([m web bootstrap header Search]) }

    set pattern [string trim [wapp-param pattern]]
    set series  {}

    try {
	### DB access and transaction here.
	set series [Search $pattern]
	###
    } on error {e} {
	wapp-trim {
	    <p> Failed to access database: %html($e) </p>
	    <p> Please try again in a minute. </p>
	}
    }

    Form $pattern
    List $pattern $series
    wapp-trim {	%unsafe([m web bootstrap footer]) }
    return
}

# Request environment
proc wapp-page-env {} {
    wapp-allow-xorigin-params
    wapp-subst {<h1>Mirror Environment</h1>\n<pre>\n}
    foreach var [lsort [wapp-param-list]] {
	if {[string index $var 0]=="."} continue
	wapp-subst {%html($var) = %html([list [wapp-param $var]])\n}
    }
    wapp-subst {</pre>\n}
}

# # ## ### ##### ######## ############# ######################

proc List {pattern series} {
    # Essentially a replica of m::web::site::List, for wapp ...
    ListHeader [llength $series]
    
    foreach row $series {
	#puts stderr (($row))
	dict with row {}
	# name vcode page status size changed updated created
	ListRow \
	    $page \
	    $name \
	    $vcode \
	    [m format epoch $changed] \
	    [m format epoch $updated] \
	    [m format epoch $created] \
	    [m format size  $size] \
	    $status [Status $status]
    }

    ListFooter
    return
}

proc ListRow {slink mname vcode changed updated created size simgs stexts} {
    wapp-trim { <tr> <td> }
    foreach stext $stexts simg $simgs {
	wapp-trim { <img alt='%html($stext)' src='%url(images/$simg)'> }
    }
    wapp-trim { </td> <td> }
    if {$mname ne {}} {
	wapp-trim { <a target='_blank' href='%url($slink)'> %html($mname) </a> }
    } else {
	wapp-trim { %html($mname) }
    }
    wapp-trim {
	</td> <td> <a target='_blank' href='%url($slink)'>
	<img height='32' alt='%html($vcode)' src='%url(images/logo/${vcode}.svg)'>
	%html($vcode)
	</a>
	</td> <td> %html($size)
	</td> <td> %html($changed)
	</td> <td> %html($updated)
	</td> <td> %html($created)
	</td> </tr>
    }
}

proc ListHeader {n} {
    wapp-trim {
	<p> Matching: %html($n) </p>
	<p> <table class='table'>
	<tr>
	<th> </th>
	<th> Mirror Set </th>
	<th> VCS </th>
	<th> Size </th>
	<th> Changed </th>
	<th> Updated </th>
	<th> Created </th>
	</tr>
    }
}

proc ListFooter {} {
    wapp-trim { </table> </p> }
}

proc Status {icons} {
    lmap icon $icons {
	dict get {
	    bad.svg    ATTEND
	    off.svg    -
	    yellow.svg /
	    {}         {}
	} $icon
    }
}

proc Form {pattern} {
    # entry field - search term
    wapp-trim {
	<form method='POST' action='%url([wapp-param PATH_HEAD])'>
	<!-- <input type='image' src='images/ok.svg' alt='Search'> -->
	<input type='text' name='pattern' size=30 value='%html($pattern)'>
	</form>
    }
    return $pattern
}

proc Sep {} {
    wapp-trim {
	<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
    }
    return
}

# # ## ### ##### ######## ############# ###################### GO

proc Search {pattern} {
    # Nothing to search for.
    if {$pattern eq {}} { return {} }

    # Look for a substring (%foo%), with possible occurences of the
    # characters special to the LIKE operator escaped.
    lappend map % \\%
    lappend map _ \\_
    lappend map \\ \\\\

    puts stderr \n_________SEARCH
    #puts stderr MAP_|$map|
    puts stderr USER|$pattern|

    set pattern %[string map $map [string tolower $pattern]]%

    puts stderr LIKE|$pattern|
    
    # Perform search. Short transaction
    set series {}
    m site transaction {
	m site eval {
	    SELECT name
	    ,      vcode
	    ,      page
	    ,      status
	    ,      size_kb
	    ,      changed
	    ,      updated
	    ,      created
	    FROM store_index
	    --
	    WHERE remotes LIKE :pattern ESCAPE '\'
	    --
	    ORDER BY name    ASC
	    ,        vcode   ASC
	    ,        size_kb ASC
	} {
	    puts stderr "   ^ $page $name $vcode"
	    lappend series \
		[dict create \
		     name    $name    \
		     vcode   $vcode   \
		     page    $page    \
		     status  $status  \
		     size    $size_kb \
		     changed $changed \
		     created $created \
		     updated $updated ]
	}
    }

    puts stderr LIKE=[llength $series]
    
    return $series
}

# # ## ### ##### ######## ############# ###################### GO
main
